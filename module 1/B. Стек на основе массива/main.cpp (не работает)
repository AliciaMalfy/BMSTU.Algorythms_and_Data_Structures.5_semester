#include <iostream>
#include <sstream>
#include <string>
#include <array>
using namespace std;

class Stack {
private:
    int capacity;
    string number;
   // int count = 0;
    string *mas;

public:
    void set_size(string);

    void push(string);

    void pop();

    void print();
};

void Stack::set_size(string value) {
    capacity = stoi(value);
    mas = new string[capacity];

    for (int i = 0; i < capacity; i++) {
        mas[i] = "";
    }
}

void Stack::push(string value) {
    int i = 0;
    number = value;

    for (int j = capacity - 1; j >= 0; j--) {
        if (mas[j] != "") {
            i++;
        }
    }

    if (i != capacity) {
        if (mas[capacity - 1 - i] == "") {
            mas[capacity - 1 - i] = value;
        } else {
            cout << "overflow" << endl;;
        }
    } else {
        cout << "overflow" << endl;;
    }
}

void Stack::pop() {
    int i = 0;
    string value_;

    try {
        for (int j = capacity - 1; j >= 0; j--) {
            if (mas[j] == "") {
                i++;
            }

            if (i == capacity) {
                throw 1;
            }
        }
    }
    catch (int err) {
        cout << "underflow" << endl;
    }

    value_ = mas[i];
    mas[i] = "";
    cout << value_ << endl;
}

void Stack::print() {
    int c = 0;

    for (int i = capacity - 1; i >= 0; i--) {
        if (mas[i] == "") {
            c++;
        }
    }

    if (c != capacity) {
        for (int i = capacity - 1; i >= 0; i--) {
            if (mas[i] == "") {
                cout << " ";
            } else {
                cout << mas[i] << " ";
            }
        }
    } else {
        cout << "Empty" << endl;
    }
}

int definition(string str) {
    string field = move(str);
    int n = 0;

    if (field == "set_size") {
        n = 1;
    }
    else if (field == "pop") {
        n = 2;
    }
    else if (field == "push") {
        n = 3;
    }
    else if (field == "print") {
        n = 4;
    }

    return n;
}

int main() {
    string s, command, tf = "1", value;
    int a;
    Stack st;
    stringstream ss;

    while (getline(cin, s)) {
        ss << s;
        ss >> command;
        ss >> value;
        ss >> tf;

        if (tf == "1") {
            a = definition(command);

            switch (a) {
                case 1: {
                    st.set_size(value);
                    break;
                }
                case 2: {
                    st.pop();
                    t:
                    break;
                }
                case 3: {
                    st.push(value);
                    break;
                }
                case 4: {
                    st.print();
                    break;
                }
            }
        }

        if (tf != "1") {
            cout << "error" << endl;
            tf = "1";
        }
        ss.clear();
    }
}
